import asyncio
import time

from aiogram import Bot, executor, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from config import * # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏—è
from keyboards import * # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ, –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ, –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from states import * # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
from Parser import * # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
from Database import *

storage = MemoryStorage()

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=storage)

@dp.message_handler(commands=["start"])
async def welcome(message):
	if check_user(message.from_user.id):
		await message.answer(welcome_message, reply_markup=get_panel_markup())
	else:
		await message.answer(welcome_message, reply_markup=get_welcome_markup())

@dp.message_handler()
async def handler(message):
	if message.text == "üè†–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É edu.tatar":
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω edu.tatar")
		await RegState.get_login.set()
	elif message.text == "üèÜ–ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥":
		if get_take_part_in_rating(message.from_user.id)[0]:
			fio, users_class, _ = get_profile(message.from_user.id)
			terms = get_terms(users_class=users_class)
			raiting = create_rating(terms, users_class, fio)

			await message.answer(raiting, reply_markup=get_panel_markup())
		else:
			await message.answer(
					"–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∫–ª–∞—Å—Å–∞! –ù–æ —ç—Ç–æ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ ‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö",
					reply_markup=get_panel_markup()
				)
	elif message.text == "üìñ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
		await message.answer(bot_info_message)
	elif message.text == "üß∞–ü—Ä–æ—Ñ–∏–ª—å":
		fio, users_class, login = get_profile(message.from_user.id)
		await message.answer("<b>–§–ò–û:</b> " + fio + "\n\n" + "<b>–ö–ª–∞—Å—Å:</b> " + users_class + "\n\n<b>–õ–æ–≥–∏–Ω:</b> " + str(login))
	elif message.text == "‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏":
		await message.answer("‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=get_config_markup())
		await ConfigState.select.set()
	elif message.text == "üîß–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞":
		await message.answer(tech_support_message, reply_markup=get_cancel_markup())
		await TechSupportState.wait_message.set()
	elif message.text == "üóë–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã":
		await message.answer(logout_message, reply_markup=get_welcome_markup())
		delete_user # —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–¥
	elif message.text == "üìï–û—Ü–µ–Ω–∫–∏ –∏ –¥–∑":
		cookie = get_cookie_data(message.from_user.id)[0] # –±–µ—Ä–µ–º –∫—É–∫–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
		cookie = decode_cookie(cookie, message.from_user.id) # –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∫—É–∫–∏ –ø–æ user_id
		if (await check_cookie(cookie)):

			text = replace_titles_on_custom(
					await parse_day(cookie),
					get_items(message.from_user.id)
				)

			await message.answer(text, reply_markup=get_day_menu_markup())
		else:
			await message.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è! –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏—Å—Ç–µ–∫, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥\n<b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</b>:")
			await UpdatePasswordState.get_password.set()
	elif message.text == "üë®‚Äçüíº–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã":
		await message.answer(repets_message)
	elif message.text == "üìù–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫–∏":
		await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —è –ø—Ä–∏—à–ª—é –≤–∞–º –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è!", reply_markup=get_cancel_markup())
		await ReminderState.get_content_state.set()
	else:
		await message.answer(unknown_command_message, reply_markup=get_panel_markup())

# —Ñ—É–Ω–∫—Ü–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ UpdatePasswordState
@dp.message_handler(state=UpdatePasswordState.get_password)
async def get_updated_password(message, state):
	login = get_profile(message.from_user.id)[2]
	cookie = await create_cookie(login, message.text)
	if cookie:
		cookie = code_cookie(cookie, message.from_user.id) # –∫–æ–¥–∏—Ä—É–µ–º –∫—É–∫–∏ —Ñ–∞–π–ª—ã –ø–æ user_id
		update_cookie(message.from_user.id, str(cookie))
		await message.answer("–í–∞—à –ø–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω, –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!")
		await state.finish()
	else:
		await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")


# —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ RegState
@dp.message_handler(state=RegState.get_login)
async def get_login(message, state):
	if len(message.text) != 10:
		await message.answer("–û—à–∏–±–∫–∞! –û–±—ã—á–Ω–æ, –ª–æ–≥–∏–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç 10 —Ü–∏—Ñ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
	elif not message.text.isdigit():
		await message.answer("–õ–æ–≥–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
	else:
		await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")

		await state.update_data(login=message.text)
		await RegState.get_password.set()

@dp.message_handler(state=RegState.get_password)
async def get_password(message, state):
	login = (await state.get_data()).get("login")
	password = message.text

	cookie = (await create_cookie(login, password))

	if cookie:
		await message.answer(succes_login_message)

		fio, users_class = await get_user_info(cookie)
		term = await parse_term(cookie)
		titles_dict = create_titles_dict(term)
		cookie = code_cookie(cookie, message.from_user.id) # –∫–æ–¥–∏—Ä—É–µ–º –∫—É–∫–∏ —Ñ–∞–π–ª—ã –ø–æ user_id

		add_new_user(user_id=message.from_user.id, # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±–¥ —Ñ–∏–æ, –∫–ª–∞—Å—Å, –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å
					login=login,
					cookie=cookie,
					fio=fio,
					users_class=users_class,
					term=term,
					custom_titles=titles_dict)

		await state.finish()
		await GetTimeState.get_time.set()
	else:
		await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –ª–æ–≥–∏–Ω–æ–º –∏ –ø–∞—Ä–æ–ª–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω edu.tatar")

		await RegState.get_login.set()

# —Ñ—É–Ω–∫—Ü–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GetTimeState
@dp.message_handler(state=GetTimeState.get_time) # –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∑, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def get_time(message, state):
	valid_time = time_is_valid(message.text)
	if valid_time == message.text:
		change_homeworktime(message.from_user.id, message.text) # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –±–¥
		await message.answer("‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏</b>", reply_markup=get_panel_markup())
		await state.finish()
	else:
		await message.answer(valid_time)

# —Ñ—É–Ω–∫—Ü–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ConfigState
@dp.message_handler(state=ConfigState.select)
async def select(message, state):
	if message.text == "‚è∞–ò–∑–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π":
		await message.answer("‚ùì –ö–æ–≥–¥–∞ –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏–µ–º?\n<i>(–ù–∞–ø—Ä–∏–º–µ—Ä: 09:45)</i>")

		await state.finish()
		await GetTimeState.get_time.set()
	elif message.text == "üèÜ–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∫–ª–∞—Å—Å–∞":
		state = get_take_part_in_rating(message.from_user.id)[0]
		if state:
			await message.answer("–í—ã –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ, –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ –Ω–µ –±—É–¥—É—Ç –≤–∏–¥–µ—Ç—å –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å, –∞ –≤—ã –∏—Ö",
								reply_markup=get_config_markup())
		else:
			await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –∫–ª–∞—Å—Å–∞!",
								reply_markup=get_config_markup())
		update_take_part_in_rating(message.from_user.id, not state)
	elif message.text == "–ü—Ä–∏—Å—ã–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ü–µ–Ω–∫–∞—Ö":
		state = get_send_changes(message.from_user.id)[0]
		if state: # –µ—Å–ª–∏ —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å—ã–ª–∫–∞ –Ω–∞ True
			await message.answer("–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ü–µ–Ω–∫–∞—Ö",
								reply_markup=get_config_markup())
		else:
			await message.answer("–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö!",
								reply_markup=get_config_markup())
		update_send_changes(message.from_user.id, not state)
	elif message.text == "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤":
		await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞</b>\n\n\
			–ï–≥–æ –∏–º—è –≤ —Å–ø–∏—Å–∫–µ –¥–∑ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ç–∞–∫, –∫–∞–∫ –≤—ã –∑–∞—Ö–æ—Ç–∏—Ç–µ",
			reply_markup=get_items_markup(
				get_items(
					message.from_user.id
					)
				)
			)
		await CustomizeTitleState.select_item.set()
	elif message.text == "–ù–∞–∑–∞–¥üîô":
		await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –æ–±—Ä–∞—Ç–Ω–æ...", reply_markup=get_panel_markup())
		await state.finish()

# —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ TechSupportState
@dp.message_handler(state=TechSupportState.wait_message)
async def wait_message(message, state):
	if message.text == "–û—Ç–º–µ–Ω–∞":
		await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –æ–±—Ä–∞—Ç–Ω–æ...", reply_markup=get_panel_markup())
	else:
		for admin_id in ADMINS:
			await bot.send_message(
				admin_id, message.text + "\n" + message.from_user.first_name + "    " + message.from_user.username)

		await message.answer(
					"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!",
					reply_markup=get_panel_markup())

	await state.finish()

# —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ReminderState
@dp.message_handler(state=ReminderState.get_content_state)
async def get_content_state(message, state):
	if message.text == "–û—Ç–º–µ–Ω–∞":
		await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –æ–±—Ä–∞—Ç–Ω–æ...", reply_markup=get_panel_markup())
		await state.finish()
	else:
		await state.update_data(content=message.text)
		await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–∞ –¥–∞—Ç–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–¥–¥.–º–º.–≥–≥</b>")
		await ReminderState.get_date_state.set()

@dp.message_handler(state=ReminderState.get_date_state)
async def get_date_state(message, state):
	if message.text == "–û—Ç–º–µ–Ω–∞":
		await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –æ–±—Ä–∞—Ç–Ω–æ...", reply_markup=get_panel_markup())
		await state.finish()
	else:
		valid_date = date_is_valid(message.text)

		if valid_date == message.text:
			await state.update_data(date=valid_date)
			await message.answer(
				"–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>—á—á:–º–º</b>, –≤ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
			await ReminderState.get_time_state.set()
		else:
			await message.answer(valid_date)

@dp.message_handler(state=ReminderState.get_time_state)
async def get_time_state(message, state):
	if message.text == "–û—Ç–º–µ–Ω–∞":
		await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –æ–±—Ä–∞—Ç–Ω–æ...", reply_markup=get_panel_markup())
		await state.finish()
	else:
		valid_time = time_is_valid(message.text)

		if valid_time == message.text:
			state_data = await state.get_data()
			content, date = state_data.get("content"), state_data.get("date")

			create_reminder(
					user_id=message.from_user.id,
					content=content,
					date=date,
					time=valid_time
				)

			await message.answer(
				f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –ø—Ä–∏–¥—ë—Ç –≤–∞–º {date} –≤ {message.text}",
				reply_markup=get_panel_markup())

			await state.finish()
		else:
			await message.answer(valid_time)

# —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CustomizeTitleState
@dp.message_handler(state=CustomizeTitleState.select_item)
async def select_item(message, state):
	if message.text == "–û—Ç–º–µ–Ω–∞":
		await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –æ–±—Ä–∞—Ç–Ω–æ...", reply_markup=get_config_markup())
		await ConfigState.select.set()
	else:
		await state.update_data(source_item_name=message.text)
		await message.answer("‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞", reply_markup=get_cancel_markup())
		await CustomizeTitleState.custom_title.set()

@dp.message_handler(state=CustomizeTitleState.custom_title)
async def custom_title(message, state):
	if message.text == "–û—Ç–º–µ–Ω–∞":
		await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –æ–±—Ä–∞—Ç–Ω–æ...", reply_markup=get_panel_markup())
	else:
		source_item_name = (await state.get_data()).get("source_item_name")
		item_names = get_items(message.from_user.id)

		custimized_titles = ""
		for item in item_names[0].split(";"):
			if source_item_name == item.split(":")[0]:
				item = f"{source_item_name}:{message.text}"

			custimized_titles += item + ";"


		update_items(message.from_user.id, custimized_titles[:-1])

		await message.answer(
						f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ <b>{source_item_name}</b> –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{message.text}</b>",
						reply_markup=get_config_markup()
					)

	await ConfigState.select.set()

# —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É inline –∫–ª–∞–≤–∏—à
@dp.callback_query_handler()
async def day_menu(callback):
	if callback.data.startswith("back"):
		page_num = int(callback.data.split("_")[1]) - 1
	elif callback.data.startswith("next"):
		page_num = int(callback.data.split("_")[1]) + 1

	cookie = get_cookie_data(callback.from_user.id)[0]
	cookie = decode_cookie(cookie, callback.from_user.id) # –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –∫—É–∫–∏ –ø–æ user_id
	if (await check_cookie(cookie)):

		day_info = await parse_day(cookie, next_days_n=page_num)
		text = replace_titles_on_custom(
					day_info,
					get_items(callback.from_user.id)
				)

		day_menu_markup = get_day_menu_markup(page_num=page_num)

		await callback.message.edit_text(text=text, reply_markup=day_menu_markup)
	else:
		await message.answer("–§—É–Ω–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è! –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –∏—Å—Ç–µ–∫, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥\n<b>–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å</b>:")
		await UpdatePasswordState.set()

	await callback.answer()

if __name__ == "__main__":
	from utils import time_is_valid, date_is_valid,reminder_sender,\
	homework_sender, term_checker, create_titles_dict, replace_titles_on_custom,\
	create_rating, code_cookie, decode_cookie

	init_db()

	loop = asyncio.get_event_loop() # –ø–æ–ª—É—á–∞–µ–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
	loop.create_task(homework_sender()) # –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ü–∏–∫–ª—É —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–∑
	loop.create_task(term_checker()) # –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ü–∏–∫–ª—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ü–µ–Ω–æ–∫
	loop.create_task(reminder_sender()) # –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ü–∏–∫–ª—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ü–µ–Ω–æ–∫

	executor.start_polling(dp, skip_updates=False, loop=loop)