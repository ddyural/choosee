import time
import asyncio

from datetime import datetime

from main import bot
from Database import get_cookie_data, get_homeworktime, get_terms, update_term, get_reminders, delete_reminder
from Parser import parse_day, parse_term, check_cookie
from keyboards import get_panel_markup


def decode_cookie(coded, key):
	decoded = int(coded) - key # –≤—ã—á–∏—Ç–∞–µ–º –∏–∑ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ dns_id 10-–∏—á–Ω—ã–π –∫–ª—é—á
	decoded = hex(decoded).strip("0x") # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ä–∞—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π dns_id –≤ 16-—Ä–∏—á–Ω—É—é —Å—Å –∏ —É–±–∏—Ä–∞–µ–º 0x
	return decoded

def code_cookie(dns_id, key):
	dns_id = int(dns_id, 16) # –ø–µ—Ä–µ–≤–æ–¥–∏–º dns_id –≤ 10-—Ä–∏—á–Ω—É—é —Å—Å
	coded = dns_id + key # –ø—Ä–∏–±–∞–≤–ª—è–µ–º –∫ –ø–æ–ª—É—á–∏–≤—à–∏–º—É—Å—è –∑–Ω–∞—á–µ–Ω–∏—é 10-–∏—á–Ω—ã–π –∫–ª—é—á
	return coded

def time_is_valid(time):
	"""
	–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
	–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
	"""
	if ":" in time:
		if time[0:2].isdigit() and time[3:5].isdigit() and len(time) == 5:
			if int(time[0:2]) < 24 and int(time[3:5]) < 60:
				return time
			else:
				return "‚ùå –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–∏–µ —á–∏—Å–ª–∞... –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É"
		else:
			return "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
	else:
		return "‚ùå –í—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –¥–≤–æ–µ—Ç–æ—á–∏–µ!"

def date_is_valid(date):
	"""
	–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—É—é –¥–∞—Ç—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è 
	–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
	"""
	try:
		day, month, year = [int(i) for i in date.split(".")]
		year = int("20" + str(year))
		datetime_date = datetime(day=day, month=month, year=year)
		date_now = datetime.now()
		formate_date_now = datetime(
				day=date_now.day,
				month=date_now.month,
				year=date_now.year
			)

		if datetime_date >= formate_date_now:
			return date
		else:
			return "‚ùå –í–≤–µ–¥–µ–Ω–Ω—ã–π –¥–µ–Ω—å —É–∂–µ –ø—Ä–æ—à–µ–ª ‚ùå\n–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –ø–æ—Ç–æ–º"
	except Exception as e:
		return "‚ùå –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞! ‚ùå\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞"
	
def create_titles_dict(term):
	"""
	–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å
	{"–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"}
	–Ω—É–∂–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–∏—Ö –∏–º–µ–Ω –ø—Ä–µ–¥–º–µ—Ç–∞–º
	"""
	translate_dict = {
	"–†–æ–¥–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–†–æ–¥–Ω–∞—è –ª–∏—Ç-—Ä–∞",
	"–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "–ò–Ω—Ñ–æ—Ä–º.",
	"–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "–õ–∏—Ç-—Ä–∞",
	"–†—É—Å—Å–∫–∏–π —è–∑—ã–∫": "–†—É—Å.—è–∑.",
	"–û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": "–û–ë–ñ",
	"–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞": "–§–∏–∑-—Ä–∞",
	"–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "–ú–∞—Ç–µ–º.",
	"–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫ (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π)": "–ò–Ω. —è–∑. (–∞–Ω–≥–ª.)"}

	items = term.split(";")
	titles_text = ""

	for item in items:
		item_name = item.split("|")[0]
		if translate_dict.get(item_name):
			item_name = translate_dict[item_name]

		titles_text += f"{item_name}:{item_name};"


	return titles_text[:-1]

def replace_titles_on_custom(day_info, custom_titles):
	"""
	–º–µ–Ω—è–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—ã–µ.
	–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–µ–∫—Å—Ç –æ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ parse_day –∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤
	"""
	for item in custom_titles[0].split(";"):
		title, custom_title = item.split(":")
		day_info = day_info.replace(title, custom_title)

	return day_info

def create_rating(terms, users_class, my_fio):
	"""
	–ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ —Ç–∞–±–µ–ª–∏ –∏–∑ –±–¥ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ –æ–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞, –∫–ª–∞—Å—Å —É—á–µ–Ω–∏–∫–∞ –∏ —Ñ–∏–æ–ª
	—Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –≤ –∫–ª–∞—Å—Å–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 
	1 –º–µ—Å—Ç–æ: —É—á–µ–Ω–∏–∫, –±–∞–ª–ª
	2 –º–µ—Å—Ç–æ: —É—á–µ–Ω–∏–∫, –±–∞–ª–ª
	3 –º–µ—Å—Ç–æ: —É—á–µ–Ω–∏–∫, –±–∞–ª–ª
	–ú–æ—ë –º–µ—Å—Ç–æ, –º–æ–π –±–∞–ª–ª
	—Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª —Å—á–∏—Ç–∞–µ—Ç—Å—è, –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –∞—Ä–µ—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–µ –≤—Å–µ—Ö –±–∞–ª–ª–æ–≤ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º. –ê–Ω–∞–ª–æ–≥ –Ω–∞ —Å–∞–π—Ç–µ - –ø–æ–ª–µ "–ò–¢–û–ì–û"
	"""
	gpas = []

	for user in terms:
		fio, term = user[0], user[1]
		points = []
		for item in term.split(";"):
			if len(item.split("|")) != 1:
				points.append(float(item.split("|")[-1])) # –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏ –≤ —Å–ø–∏—Å–æ–∫

		gpa = sum(points) / len(points) # –Ω–∞—Ö–æ–¥–∏–º —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª
		if fio == my_fio:
			my_gpa = {"fio": fio, "gpa": gpa} # –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–æ–µ–≥–æ –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
		gpas.append({ # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫, –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –ø–æ–∫–∞–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
			"fio": fio,
			"gpa": gpa})

	gpas.sort(reverse=True, key=lambda e: e['gpa']) # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –±–∞–ª–ª—É

	text = f"<b>–†–µ–π—Ç–∏–Ω–≥ –≤ <em>{users_class}–µ</em></b>\n\n"
	if len(gpas) >= 1:
		text += f"ü•á –º–µ—Å—Ç–æ: {gpas[0]['fio']} —Å –±–∞–ª–ª–æ–º {str(gpas[0]['gpa'])[:5]}\n"
	if len(gpas) >= 2:
		text += f"ü•à –º–µ—Å—Ç–æ: {gpas[1]['fio']} —Å –±–∞–ª–ª–æ–º {str(gpas[1]['gpa'])[:5]}\n"
	if len(gpas) >= 3:
		text += f"ü•â –º–µ—Å—Ç–æ: {gpas[2]['fio']} —Å –±–∞–ª–ª–æ–º {str(gpas[2]['gpa'])[:5]}\n\n"

	text += f"–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: {gpas.index(my_gpa) + 1}, –±–∞–ª–ª {str(my_gpa['gpa'])[:5]}"
	return text

async def homework_sender():
	"""
	–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–æ–º—É –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∑ –∏ –æ—Ç—Å—ã–ª–∞–µ—Ç
	"""
	while True:
		timik = time.localtime()
		hours = time.strftime('%H', timik)
		mins = time.strftime('%M', timik)

		homeworktimes = get_homeworktime()
		for user in homeworktimes:
			homework_time_str = str(hours) + ':' + str(mins)

			if user[1] == homework_time_str:
				cookie = get_cookie_data(user[0])[0]
				cookie = decode_cookie(cookie, user[0])
				if (await check_cookie(cookie)):
					day_info = await parse_day(cookie, next_days_n=1) # –ø–µ—Ä–µ–¥–∞–µ–º –ª–æ–≥–∏–Ω, –ø–∞—Ä–æ–ª—å –∏ —Å–º–æ—Ç—Ä–∏–º –¥–∑ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –≤–ø–µ—Ä–µ–¥

					await bot.send_message(user[0], day_info)

		await asyncio.sleep(60)

async def term_checker():
	"""
	–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, —Ä–∞–∑ –≤ N —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ —Ç–∞–±–µ–ª–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏, —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç —Å–æ —Å—Ç–∞—Ä–æ–π –≤ –±–¥ –∏, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è, –æ—Ç—Å—ã–ª–∞–µ—Ç –∏—Ö
	"""
	while True:
		start = time.time()
		terms = get_terms()
		tasks = []

		for user in terms:
			if user[2]: # –µ—Å–ª–∏ —Å—Ç–æ–∏—Ç –º–µ—Ç–∫–∞ –æ —Ç–æ–º, —á—Ç–æ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏
				cookie = get_cookie_data(user[0])[0] # –ø–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å
				cookie = decode_cookie(cookie, user[0])
				if (await check_cookie(cookie)):
					asyncio.create_task( # —Å–æ–∑–¥–∞–µ–º —Ç–∞—Å–∫–∏ –≤ –≤–∏–¥–µ —Ñ—É–Ω–∫—Ü–∏–π find_changes
						find_changes(
							cookie=cookie,
							user=user
							)
						)

		asyncio.gather(*tasks)
		await asyncio.sleep(30)

async def find_changes(cookie, user):
	"""
	–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –æ—Ü–µ–Ω–æ–∫ –≤ —Ç–∞–±–µ–ª–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏
	–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ term_checker –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å –ø–æ–º–æ—â—å—é —Ç–∞—Å–∫–æ–≤
	"""
	new_term_for_db = await parse_term(cookie)

	new_term = new_term_for_db.split(";")
	old_term = user[1].split(";")

	for i in range(len(new_term)):
		item_name = old_term[i].split("|")[0]

		if len(new_term[i].split("|")) > 1 and len(old_term[i].split("|")) > 1:
			new_marks = new_term[i].split("|")[1].split("_")
			old_marks = old_term[i].split("|")[1].split("_")
		elif len(new_term[i].split("|")) > 1 and len(old_term[i].split("|")) == 1:
			new_marks = new_term[i].split("|")[1].split("_")
			old_marks = []
		else:
			new_marks = []
			old_marks = []

		changes = []

		for j in range(1, 6): # —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ü–µ–Ω–æ–∫. 1 –∏ 6 - –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ü–µ–Ω–æ–∫ –≤ edu tatar (6 –Ω–µ —É—á–∏—Ç—ã–∞–µ—Ç—Å—è –≤ —Ü–∏–∫–ª–µ)
			if old_marks.count(str(j)) != new_marks.count(str(j)):
				for i in range(new_marks.count(str(j)) != old_marks.count(str(j))):
					changes.append(str(j))

		if changes: # –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏, —Ç–æ —Å—Ä–∞–∑—É –∏—Ö –≤—ã—Å—ã–ª–∞–µ–º
			await bot.send_message(user[0],
					f"–£ –≤–∞—Å –Ω–æ–≤—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <em>{item_name}</em>: " + " ".join(changes))

			update_term(user[0], new_term_for_db)

async def reminder_sender():
	"""
	–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É —Ç–∞–±–ª–∏—Ü—É reminders
	–µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç
	"""
	while True:
		reminders = get_reminders()
		for user in reminders:
			date, time = user[4], user[3]
			if date == datetime.now().strftime("%d.%m.%y") and time == datetime.now().strftime("%H:%M"):
				await bot.send_message(
					user[1],
					text="<b>–ù–∞–ø–æ–º–∏–Ω–∞—é!</b>\n\n" + user[2],
					reply_markup=get_panel_markup())

				delete_reminder(user[1], date, time)

		await asyncio.sleep(60)

if __name__ == "__main__":
	terms = get_terms(users_class="11–≥ –∫–ª–∞—Å—Å")
	print(create_rating(terms, "11–±–≥ –∫–ª–∞—Å—Å", "–ë–∞—Ö—Ç–∏–µ–≤–∞ –ê–¥–µ–ª–∏–Ω–∞ –ê–ª—å—Ñ—Ä–µ–¥–æ–≤–Ω–∞"))